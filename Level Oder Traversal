class Node:
  def __init__(self,value):
    self.value=value
    self.left=None
    self.right=None

def level_order(root):
  if root is None:
    return
  queue=[]
  queue.append(root)
  while (len(queue)>0):
    print(queue[0].value)
    node=queue.pop(0)

    if node.left is not None:
      queue.append(node.left)
    if node.right is not None:
      queue.append(node.right)

root=Node(1)
root.left=Node(2)
root.right=Node(3)
root.left.left=Node(4)
root.left.right=Node(5)
print("Level Order Traversal is--")
level_order(root)

----------------Leetcode-----------------------------------
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def levelOrder(self, root: TreeNode) -> List[List[int]]:
        if root is None:
            return []
        
        queue,res=[[root]],[]
        #queue.append(root)
        
        while queue:
            curLevel=queue.pop()
            newLevel,curValues=[],[]
            for node in curLevel:
                if node:
                    curValues.append(node.val)
                    newLevel+=[node.left,node.right]
            if newLevel:
                    queue.append(newLevel)
            if curValues:
                    res.append(curValues)
        return res
